
process {

  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  // errorStrategy = { task.exitStatus in [1,143,137,104,134,139,255] ? 'retry' : 'terminate' }
  errorStrategy = { task.exitStatus in [1] ? 'terminate' : 'retry' }
  maxRetries = 10
  maxErrors = '-1'

 
  withName:star {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:hisat2Align {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:hisat2_sortOutput {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 128.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:salmon_quant {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: salmon_merge {
    cpus = 1
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName: merge_featureCounts{
    cpus = 1
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName: exon_count_merge {
    cpus = 1
    memory = { check_max( 128.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName:rseqc {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }
  withName:createBigWig {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
  }
  withName:genebody_coverage {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
  }
  withName:markDuplicates {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:dupradar {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:sort_by_name_BAM {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 24.GB * task.attempt, 'memory' ) }
    time = {check_max(4.h * task.attempt, 'time')}
  }  
  withName:featureCounts {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:sample_correlation {
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
  }
  withName:multiqc {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    errorStrategy = 'ignore'
  }
  withName:get_software_versions {
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    errorStrategy = 'ignore'
  }
  withName:workflow_summary_mqc {
    cpus = { check_max (1, 'cpus') }
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    executor = 'local'
    errorStrategy = 'ignore'
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}