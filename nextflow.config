/*
 * -------------------------------------------------
 *  nfcore/rnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"
 
  // Custom LeafCutter options
  leafcutter_min_split_reads = 50 // requiring 50 split reads supporting each cluster
  leafcutter_max_intron_length = 500000 // allowing introns of up to 500kb


  // Custom trimming options
  pico = false
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0

  seqCenter = false

  saveReference = true

  forward_stranded = false
  reverse_stranded = false
  unstranded = false
}

profiles {

  tartu_hpc {
    includeConfig 'conf/base.config'
    includeConfig 'conf/tartu_hpc.config'
  }
  
  none {
    //process.container = '../images/rnaseq:v20.11.1'
    // Don't load any config (for use with custom home configs)
    singularity {
      enabled = true
      autoMounts = true
      cacheDir = './images'
    }

    process {
      errorStrategy = { task.exitStatus in [1] ? 'terminate' : 'retry' }
      maxRetries = 1
      maxErrors = '-1'
    }
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_DAG.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}